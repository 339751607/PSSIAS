<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd"
	   default-autowire="byName" default-lazy-init="false">

	<!-- 属性文件读入,使用rapid中的JdbcPlaceholderConfigurer则可以从数据库读取配置信息-->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath*:jdbc.properties</value>
			</list>
		</property>
	</bean>

   <!-- 行业的数据源 -->
	<bean id="zazhdataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>
	
	<bean id="dataSource"  class="javacommon.base.DynamicDataSource">
        <property name="targetDataSources">
            <map>
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="zazhdataSource" />
    </bean>
	<!-- 
	 <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
        <property name="jndiName"><value>jdbc/pmddDS</value></property>
    </bean>   -->

	<!-- 以 @Transactional 标注来定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
	
	<!-- 以AspectJ方式 定义 AOP -->
	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* javacommon.base.BaseManager.*(..))" advice-ref="txAdvice"/>
		<aop:advisor pointcut="execution(* com.dyneinfo.zazh.service.*Manager.*(..))" advice-ref="txAdvice"/>
	</aop:config>
	
	<!--  动态切换数据源方式 -->
	<bean id="sjy" class="javacommon.base.BeforeAdvice" />
	<aop:config proxy-target-class="true">
		<aop:aspect ref="sjy">
			<aop:before method="setZazhDataSource" pointcut="execution(* com.dyneinfo.zazh.dao.*Dao.*(..))" />
			<aop:before method="setZazhDataSource" pointcut="execution(* com.dyneinfo.dwr.dao.*Dao.*(..))" />
			<aop:before method="setGasDataSource" pointcut="execution(* com.dyneinfo.gas.dao.*Dao.*(..))" />
			<aop:before method="setJxyDataSource" pointcut="execution(* com.dyneinfo.jxy.dao.*Dao.*(..))" />
			<aop:before method="setFjyDataSource" pointcut="execution(* com.dyneinfo.fjy.dao.*Dao.*(..))" />
			<aop:before method="setYlcsDataSource" pointcut="execution(* com.dyneinfo.ylcs.dao.*Dao.*(..))" />
			<aop:before method="setHotelDataSource" pointcut="execution(* com.dyneinfo.hotel.dao.*Dao.*(..))" />
			<aop:before method="setHotelDataSource" pointcut="execution(* com.dyneinfo.hotel.action.*Action.*(..))" />
			<aop:before method="setPmddDataSource" pointcut="execution(* com.dyneinfo.pmdd.dao.*Dao.*(..))" />
			
			<aop:before method="setZazhDataSource" pointcut="execution(* com.dyneinfo.zazh.action.*Action.*(..))" />
			<aop:before method="setGasDataSource" pointcut="execution(* com.dyneinfo.gas.action.*Action.*(..))" />
			<aop:before method="setJxyDataSource" pointcut="execution(* com.dyneinfo.jxy.action.*Action.*(..))" />
			<aop:before method="setFjyDataSource" pointcut="execution(* com.dyneinfo.fjy.action.*Action.*(..))" />
			<aop:before method="setYlcsDataSource" pointcut="execution(* com.dyneinfo.ylcs.action.*Action.*(..))" />
			<aop:before method="setHotelDataSource" pointcut="execution(* com.dyneinfo.hotel.action.*Action.*(..))" />
			<aop:before method="setPmddDataSource" pointcut="execution(* com.dyneinfo.pmdd.action.*Action.*(..))" />

			<aop:before method="setZazhDataSource" pointcut="execution(* org.security.userdetails.jdbc.MySecurityJdbcDaoImpl.*(..))" />
			<aop:before method="setZazhDataSource" pointcut="execution(* org.springframework.security.ui.AbstractProcessingFilter.*(..))" />
		</aop:aspect>
	</aop:config>


	<!-- 基本事务定义,使用transactionManager作事务管理,默认get* find*方法的事务为readonly,其余方法按默认设置.
			 默认的设置请参考Spring文档事务一章. -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true"/>
			<tx:method name="get*" read-only="true"/>
			<tx:method name="query*" read-only="true"/>
			<tx:method name="*" read-only="false"/>
		</tx:attributes>
	</tx:advice>
</beans>